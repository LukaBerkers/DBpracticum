PRAGMA foreign_keys = ON;

-- Trit(tritid, ritnr, isHeen, vertrektijd, serie)
-- Brit(britid, ritnr, isHeen, vertrektijd, lijn)

-- TODO Constraint: `ritnr` matches (except last 2 digits) `serie`, can only be
--      done using triggers
-- TODO Write constraint to check if `vertrektijd` is a correctly formatted
--      datetime

CREATE TABLE Trit (
    tritid      INTEGER     PRIMARY KEY,
    ritnr       INTEGER     NOT NULL,
    isHeen      BOOLEAN     NOT NULL,
    vertrektijd DATETIME    NOT NULL,   -- Format: yyyy-mm-dd hh:mm
    serie       INTEGER     REFERENCES Tserie(serieid) NOT NULL,
    UNIQUE (ritnr, vertrektijd, serie),
    CHECK (ritnr % 2 = isHeen),
    -- Check the formatting of `vertrektijd`
    -- If the datetime is correctly formatted, the formatting function should
    -- return the same string it was passed and the check will pass.
    CHECK (vertrektijd IS strftime('%Y-%m-%d %H:%M', vertrektijd))
);

CREATE TABLE Brit (
    britid      INTEGER     PRIMARY KEY,
    ritnr       INTEGER     NOT NULL,
    isHeen      BOOLEAN     NOT NULL,
    vertrektijd DATETIME    NOT NULL,   -- Format: yyyy-mm-dd hh:mm
    lijn        INTEGER     REFERENCES Blijn(lijnid) NOT NULL,
    UNIQUE (ritnr, vertrektijd, lijn),
    CHECK (ritnr % 2 = isHeen),
    CHECK (vertrektijd IS strftime('%Y-%m-%d %H:%M', vertrektijd))
);

-- Tserie(serieid, serienr, vervoerder -> bedrijfsnaam, concessie)
-- Blijn(lijnid, lijnnr, vervoerder -> bedrijfsnaam, concessie)

CREATE TABLE Tserie (
    serieid     INTEGER PRIMARY KEY,
    serienr     INTEGER NOT NULL,
    vervoerder  TEXT    REFERENCES Vervoersbedrijf(bedrijfsnaam) NOT NULL,
    concessie   TEXT    REFERENCES Concessie(concessienaam) NOT NULL,
    UNIQUE (serienr, concessie)
);

CREATE TABLE Blijn (
    lijnid      INTEGER PRIMARY KEY,
    lijnnr      INTEGER NOT NULL,
    vervoerder  TEXT REFERENCES Vervoersbedrijf(bedrijfsnaam) NOT NULL,
    concessie   TEXT REFERENCES Concessie(concessienaam) NOT NULL,
    UNIQUE (lijnnr, concessie)
);

-- TStoptBij(serieid, tlocatie, moment)
-- BStoptBij(lijnid, blocatie, moment)

CREATE TABLE TStoptBij (
    moment      TIME    NOT NULL,    -- Format: hh:mm
    station     INTEGER REFERENCES Station(stationid) NOT NULL,
    serieid     INTEGER REFERENCES Tserie(serieid) NOT NULL,
    PRIMARY KEY (moment, station, serieid),
    CHECK (moment IS strftime('%H:%M', moment))
);

CREATE TABLE BStoptBij (
    moment      TIME    NOT NULL,    -- Format: hh:mm
    halte       INTEGER REFERENCES Bushalte(halteid) NOT NULL,
    lijnid      INTEGER REFERENCES Blijn(lijnid) NOT NULL,
    PRIMARY KEY (moment, halte, lijnid),
    CHECK (moment IS strftime('%H:%M', moment))
);

-- Station(tlocatie, stopnaam, plaats)
-- Bushalte(blocatie, stopnaam, plaats, station -> tlocatie)

CREATE TABLE Station (
    stationid   INTEGER PRIMARY KEY,
    longitude   REAL NOT NULL,
    latitude    REAL NOT NULL,
    stopnaam    TEXT,
    plaats      TEXT NOT NULL,
    UNIQUE (longitude, latitude)
);

CREATE TABLE Bushalte (
    halteid     INTEGER PRIMARY KEY,
    longitude   REAL NOT NULL,
    latitude    REAL NOT NULL,
    stopnaam    TEXT,
    plaats      TEXT NOT NULL,
    station     INTEGER REFERENCES Station(stationid),
    UNIQUE (longitude, latitude)
);

-- Vervoersbedrijf(bedrijfsnaam)

CREATE TABLE Vervoersbedrijf (
    bedrijfsnaam    TEXT PRIMARY KEY
);

-- Concessie(concessienaam, gehouden-door -> bedrijfsnaam)

CREATE TABLE Concessie (
    concessienaam   TEXT PRIMARY KEY,
    gehoudenDoor    TEXT REFERENCES Vervoersbedrijf(bedrijfsnaam)
);
